from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData

from database.models.transaction import fiat_currency, all_currency, Currency

from config import USER_COMMISSION, AUTH_USER_COMMISSION, MERCHANT_COMMISSION

start_screen_allow = {
    'text': '–ü—Ä–∏–≤–µ—Ç.\n\n –î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –¢–∞–∫ –º—ã –±—É–¥–µ–º –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫.',
    'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True).row(
        KeyboardButton(text = '–ì–æ—Ç–æ–≤ –∫ –æ–±–º–µ–Ω—É', request_contact = True)
    )
}

start_screen_username_not = {
    'text': '–ü—Ä–∏–≤–µ—Ç.\n\n –í–∞—à username –Ω–µ —É–∫–∞–∑–∞–Ω. –ú—ã –Ω–µ –º–æ–∂–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å.'
}

main_screen = {
    'text': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            '\n'
            '\n–¢—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏–∏:'
            '\n/newtrans - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏—é'
            '\n/mytrans - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏–∏'
            '\n'
            '\n–ö—É—Ä—Å—ã:'
            '\n/rates'
}

make_transaction_have_currency = {
    'text': '–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å?',
    'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True).add(
        *[KeyboardButton(i) for i in all_currency]
    )
}

make_transaction_get_fiat_currency = {
    'text': '–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å?',
    'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True).add(
        *[KeyboardButton(i) for i in fiat_currency]
    )
}


def make_transaction_amount(currency):
    return {
        'text': f'–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {currency} –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å'
    }


def make_transaction_rate(have_currency, get_currency):
    return {
        'text': f'–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ {have_currency} ‚û°Ô∏è {get_currency}'
    }


make_transaction_incorrect_number = {
    'text': '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 12, 10.1, 10.11. –¢–∞–∫ –∂–µ –Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ '
            '–∑–Ω–∞—á–µ–Ω–∏–µ, –±–æ–ª—å—à–µ —Å–æ—Ç—ã—Ö.'
}


make_transaction_cd = CallbackData('trans', 'have_currency', 'get_currency', 'amount', 'rate')


def make_transaction_show(have_currency, get_currency, amount: float | int, rate: float | int, auth_user=False):
    if have_currency == Currency.RUB and get_currency == Currency.BAT:
        get_amount = round(amount / rate, 2)
    elif have_currency == Currency.BAT and get_currency == Currency.RUB:
        get_amount = round(amount * rate, 2)
    elif have_currency == Currency.USDT and get_currency == Currency.BAT:
        get_amount = round(amount * rate, 2)
    elif have_currency == Currency.BAT and get_currency == Currency.USDT:
        get_amount = round(amount / rate, 2)
    else:
        raise f"pair {have_currency} -> {get_currency} not allowed"

    commission = round(get_amount * (AUTH_USER_COMMISSION if auth_user else USER_COMMISSION / 100), 2)
    get_amount_without_commission = round(get_amount - commission, 2)
    return {
        'text': f'ü§ù –û—Ç–¥–∞—ë—Ç–µ: {amount} {have_currency}'
                f'\nü§ù –ü–æ–ª—É—á–∞–µ—Ç–µ: {get_amount_without_commission} {get_currency}'
                f'\nüí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission} {get_currency}'
                f'\nüìâ –ö—É—Ä—Å: {rate}',
        'reply_markup': InlineKeyboardMarkup().row(
            InlineKeyboardButton('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data = make_transaction_cd.new(have_currency, get_currency,
                                                                                           amount, rate)),
            InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data = 'del_message'))
    }
