from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove
from aiogram.utils.callback_data import CallbackData

import config
from database.models.transaction_moderate import *

start_screen_allow = {
    'text': '–ü—Ä–∏–≤–µ—Ç.\n\n–î–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –¢–∞–∫ –º—ã –±—É–¥–µ–º –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫.',
    'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True).row(
        KeyboardButton(text = '–ì–æ—Ç–æ–≤ –∫ –æ–±–º–µ–Ω—É', request_contact = True)
    )
}

start_screen_username_not = {
    'text': '–ü—Ä–∏–≤–µ—Ç.\n\n–í–∞—à username –Ω–µ —É–∫–∞–∑–∞–Ω. –ú—ã –Ω–µ –º–æ–∂–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å.\n–î–æ–±–∞–≤—å—Ç–µ username –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start'
}

main_screen = {
    'text': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
            '\n'
            '\n–¢—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏–∏:'
            '\n/newtrans - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏—é'
            '\n/mytrans - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ç—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏–∏'
            '\n'
            '\n–ö—É—Ä—Å—ã:'
            '\n/rates'
}

make_transaction_have_currency = {
    'text': '–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å?',
    'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True).add(
        *[KeyboardButton(i) for i in all_currency]
    )
}

make_transaction_get_fiat_currency = {
    'text': '–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å?',
    'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True).add(
        *[KeyboardButton(i) for i in fiat_currency]
    )
}


def make_transaction_amount(currency):
    return {
        'text': f'–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {currency} –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å',
        'reply_markup': ReplyKeyboardRemove()
    }


def make_transaction_rate(have_currency, get_currency):
    return {
        'text': f'–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ {have_currency} ‚û°Ô∏è {get_currency}'
    }


make_transaction_incorrect_number = {
    'text': '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n\n –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 12, 10.1, 10.11. –¢–∞–∫ –∂–µ –Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ '
            '–∑–Ω–∞—á–µ–Ω–∏–µ, –±–æ–ª—å—à–µ —Å–æ—Ç—ã—Ö.'
}

transaction_get = {
    TransGet.cash: '–ù–∞–ª–∏—á–Ω—ã–µ',
    TransGet.atm_machine: '–ù–∞–ª–∏—á–Ω—ã–µ –ø–æ –∫–æ–¥—É',
    TransGet.bank_balance: '–ü–µ—Ä–µ–≤–æ–¥'
}


def make_transaction_get_type_thb():
    return {
        'text': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è THB",
        'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True).add(
            KeyboardButton(transaction_get[TransGet.cash]),
            KeyboardButton(transaction_get[TransGet.bank_balance])
        ).add(
            KeyboardButton(transaction_get[TransGet.atm_machine])
        )
    }


def make_transaction_town():
    return {
        'text': '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥',
        'reply_markup':
            ReplyKeyboardMarkup(resize_keyboard = True).add(*[KeyboardButton(i) for i in config.TOWNS.keys()])
    }


def make_transaction_region(town):
    return {
        'text': '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω',
        'reply_markup':
            ReplyKeyboardMarkup(resize_keyboard = True).add(*[KeyboardButton(i) for i in config.TOWNS[town]])
    }


def make_transaction_end():
    return {
        'text': '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        'reply_markup': ReplyKeyboardRemove()
    }


def make_transaction_bank():
    return {
        'text': '–í—ã–±–µ—Ä–∏—Ç–µ –ë–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω–∏—è',
        'reply_markup': ReplyKeyboardMarkup(resize_keyboard = True).add(*[KeyboardButton(i) for i in config.BANKS])
    }


def make_transaction_number():
    # todo load prev
    return {
        'text': '–ù–∞–ø–∏—à–∏—Ç–µ —Å—á–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 9570147158',
        'reply_markup': ReplyKeyboardRemove()
    }


def make_transaction_name():
    return {
        'text': '–ù–∞–ø–∏—à–∏—Ç–µ –ò–Ω–∏—Ü–∏–∞–ª—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫–∞—Ä—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Denis Mandrikov',
        'reply_markup': ReplyKeyboardRemove()
    }


make_transaction_cd = CallbackData('trans', 'id', 'public')


def make_transaction_show(transaction: TransactionModerate):
    if transaction.get_thb_type == TransGet.cash:
        type_get_thb_descr = f'\nüí≥ –¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è: {transaction_get[TransGet.cash]}' \
                             f'\nüèô: {transaction.option1}, {transaction.option2}'
    elif transaction.get_thb_type == TransGet.atm_machine:
        type_get_thb_descr = f'\nüí≥ –¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è: {transaction_get[TransGet.atm_machine]}'
    elif transaction.get_thb_type == TransGet.bank_balance:
        type_get_thb_descr = f'\nüí≥ –¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è: {transaction_get[TransGet.bank_balance]}' \
                             f'\nüè¶: {transaction.option1} {transaction.option2}' \
                             f'\nüë®‚Äçüíº: {transaction.option3}'
    else:
        type_get_thb_descr = ''

    return {
        'text': f'ü§ù –û—Ç–¥–∞—ë—Ç–µ: {transaction.have_amount} {transaction.have_currency}'
                f'\nü§ù –ü–æ–ª—É—á–∞–µ—Ç–µ: {transaction.get_amount} {transaction.get_currency}'
        # f'\nüí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission} {get_currency}'
                f'\nüìâ –ö—É—Ä—Å: {transaction.rate}'
                f'{type_get_thb_descr}',
        'reply_markup': InlineKeyboardMarkup().row(
            InlineKeyboardButton('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å',
                                 callback_data = make_transaction_cd.new(id = transaction.id, public = 1)),
            InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                                 callback_data = make_transaction_cd.new(id = transaction.id, public = 0)))
    }
